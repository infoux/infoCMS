
// COLOR
$main-color: $green - 20%;

// _variables.scss line 78
$theme-colors2: ()
!default;
$theme-colors2: map-merge((
    "primary": $main-color, 
    "secondary": $secondary, 
    "success": $success, 
    "info": $info, 
    "warning": $warning, 
    "danger": $danger, 
    "light": $light, 
    "dark": $dark
    ), 
    $theme-colors2);



// _buttons.scss line 59
@each $color, $value in $theme-colors2 {
    .btn-#{$color} {
        @include button-variant($value, $value);
    }
}

// _pagination.scss
.page-link {
    background-color: transparent;
    border: none;
    color: $gray-800;
    @include border-radius($border-radius);

    &:hover {
        color: $main-color;
        background-color: $gray-300;
    }
}

.page-item {

    &:first-child {
        .page-link {
            margin-left: 0;
            @include border-radius($border-radius);
        }
    }
    &:last-child {
        .page-link {
            @include border-radius($border-radius);
        }
    }
}


//
// Tabs
//

.nav-tabs2 {
    border-bottom: none;
    padding:rem(6px 3px 0);
  

    @include media-breakpoint-up(xl) {
        padding:8px 10px 0;
      }

    .nav-item {
        position:relative;
        @include pmz(0,0);
    }
  
    .nav-link {
      border: none;
      background:$gray-600;
      color: $gray-500;
      margin:rem(0 3px 0);
      @include border-radius($nav-tabs-border-radius);
      margin:rem(0 3px 6px);

      @include media-breakpoint-up(xl) {
        border-radius:rem(16px 8px 0 0);
        margin:0 3px 0;
      }


      @include hover-focus {
        border-color: $nav-tabs-link-hover-border-color;
      }

      @include ellipse;
  
      &.disabled {
        color: $nav-link-disabled-color;
        background-color: $gray-400;
      }
    }

    .close {
        font-size:rem(14px);
        position:absolute;
        right:rem(7px);
        top:rem(2px);
        text-shadow:none;
    }
  
    .nav-link.active,
    .nav-item.show .nav-link {
      color: $gray-900;
      background-color: $gray-200;
    }

    .nav-link.active + .close {
        color:$gray-600;
    }
  }
  


// _variables.scss line 223
$grid-gutter-width: 16px;


// _grid-framework.scss
@mixin make-grid-columns2($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
    // Common properties for all breakpoints
    %grid-column {
      position: relative;
      width: 100%;
      padding-right: $gutter / 2;
      padding-left: $gutter / 2;
    }
  
    @each $breakpoint in map-keys($breakpoints) {
      $infix: breakpoint-infix($breakpoint, $breakpoints);
  
      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @extend %grid-column;
        }
      }
      .col#{$infix},
      .col#{$infix}-auto {
        @extend %grid-column;
      }
  
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        // Provide basic `.col-{bp}` classes for equal-width flexbox columns
        .col#{$infix} {
          flex-basis: 0;
          flex-grow: 1;
          max-width: 100%;
        }
        .col#{$infix}-auto {
          flex: 0 0 auto;
          width: auto;
          max-width: 100%; // Reset earlier grid tiers
        }
  
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }
  
        .order#{$infix}-first { order: -1; }
  
        .order#{$infix}-last { order: $columns + 1; }
  
        @for $i from 0 through $columns {
          .order#{$infix}-#{$i} { order: $i; }
        }
  
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }

  

// mixins/_grid.scss

@mixin make-container2($gutter: $grid-gutter-width) {
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
    margin-right: auto;
    margin-left: auto;
  }
  




// _grid.scss


@if $enable-grid-classes {
    .container {
      @include make-container2();
      @include make-container-max-widths();
    }
  }
  
  // Fluid container
  //
  // Utilizes the mixin meant for fixed width containers, but with 100% width for
  // fluid, full width layouts.
  
  @if $enable-grid-classes {
    .container-fluid {
      @include make-container2();
    }
  }
  
  // Row
  //
  // Rows contain and clear the floats of your columns.
  
  @if $enable-grid-classes {
    .row {
      @include make-row();
    }
  
    // Remove the negative margin from default .row, then the horizontal padding
    // from all immediate children columns (to prevent runaway style inheritance).
    .no-gutters {
      margin-right: 0;
      margin-left: 0;
  
      > .col,
      > [class*="col-"] {
        padding-right: 0;
        padding-left: 0;
      }
    }
  }
  
  // Columns
  //
  // Common styles for small and large grid columns
  
  @if $enable-grid-classes {
    @include make-grid-columns2();
  }
  